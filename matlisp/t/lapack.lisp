(in-package #:matlisp-tests)
(named-readtables:in-readtable :infix-dispatch-table)

;;TODO:add tests for different strides
;;Cholesky
(5am:test chol-test
  (let ((dims (list 20 20)))
    (mapcar #'(λ (arg)
		 (letv* (((func eps uplo) arg))
		   (letv* ((l a (let* ((gen (funcall func dims))
				       (a #i(gen + gen')) (λλ 0))
				  (values
				   (handler-bind ((m::matrix-not-pd #'(λ (c) (declare (ignore c)) (invoke-restart 'm::increment-diagonal-and-retry (incf λλ 1)))))
				     (chol a uplo))
				   #i(ret := a + λλ * eye(dimensions(a), \ (class-of a)), ret))))
			   (x (funcall func dims)))
		     (is (<= (norm (t:- a (let ((l (ecase uplo (:u (t:ctranspose l)) (:l l)))) (t:* l (ctranspose l))))) eps))
		     (is (<= (norm (t:- x (potrs! l (t:* a x) uplo))) (* 10 eps))))))
	    (mapcar #'(λ (x) (apply #'append x))
		    (cart
		     (zip (list #'srandn #'randn #'crandn #'zrandn)
			  (list 1e-4 1e-13 1e-4 1e-13))
		     `((:l) (:u)))))))
;;LDL
(5am:test ldl-test
  (let ((dims (list 20 20)))
    (mapcar #'(λ (arg)
		 (letv* (((func eps herm uplo) arg))
		   (is (<= (letv* ((gen (funcall func dims))
				   (a (if herm #i(gen + gen') #i(gen + gen.')))
				   (l d p (ldl a herm uplo)))
			     (norm #i(pl := (/p) * l, a  - if(herm, pl * d * pl', pl * d * pl.')))) eps))))
	    (mapcar #'(λ (x) (apply #'append x))
		    (cart
		     (zip (list #'srandn #'randn #'crandn #'zrandn)
			  (list 1e-4 1e-13 1e-4 1e-13))
		     `((nil) (t))
		     `((:l) (:u)))))))
;;Eigenvalues
(5am:test eig-test
  (let ((dims (list 20 20)))
    (mapcar #'(λ (arg)
		 (letv* (((func eps) arg)
			 (a (funcall func dims)))
		   (letv* ((e vl vr (eig a :vv))) ;;GEEV
		     (is (<= (norm #i(vr * diag(e) * /vr - a)) eps))
		     (is (<= (norm #i((/vl)'* diag(e, 2) * vl' - a)) eps)))
		   (letv* ((asym #i(a + a')) ;;HEEV
			   (e v (eig asym :v)))
		     (is (<= (norm #i(v * diag(e, 2) * v' - asym)) eps)))))
	    (zip (list #'srandn #'randn #'crandn #'zrandn)
		 (list 1e-4 1e-13 1e-4 1e-13)))))
;;Least squares
(5am:test lstsq-test
  (mapcar #'(λ (arg)
	       (letv* (((func eps) arg)
		       (a (funcall func '(20 10)))
		       (x (funcall func '(10 10)))
		       (b (t:* a x)))
		 (is (<= (norm (t:- x (lstsq a b))) eps))))
	  (zip (list #'srandn #'randn #'crandn #'zrandn)
	       (list 1e-4 1e-13 1e-4 1e-13))))
;;LU
(5am:test lu-test
  (let ((n 20))
    (mapcar #'(λ (arg)
		 (letv* (((func eps) arg))
		   (letv* ((a (funcall func (list n n)))
			   (x (funcall func (list n n)))
			   (lu plu (lu a nil))
			   (l u p (lu a t)))
		     (is (<= (norm (t:- x (getrs! lu (t:* a x) :n))) (* 10 eps)))
		     (is (<= (norm (t:- x (getrs! lu (t:* a x) :n plu))) (* 10 eps)))
		     (is (<= (norm (t:- x (getrs! lu #i(a' * x) :c))) (* 10 eps)))
		     (is (<= (norm (t:- x (getrs! lu #i(a' * x) :c plu))) (* 10 eps)))
		     (is (<= (norm (t:- x (getrs! lu #i(a' * x) :c plu))) (* 10 eps)))
		     (is (<= (norm (t:- x (trs! 1 u (trs! 1 l (t:* p (t:* a x)) :nul :l) :nnl :u))) (* 10 eps))))
		   (letv* ((a (funcall func (list n (* 2 n))))
			   (l u plu (lu a t)))
		     (is (<= (norm #i(plu * a - l * u)) eps)))		   
		   (letv* ((a (funcall func (list (* 2 n) n)))
			   (l u plu (lu a t)))
		     (is (<= (norm #i(plu * a - l * u)) eps)))))
	    (zip (list #'srandn #'randn #'crandn #'zrandn)
		 (list 1e-4 1e-13 1e-4 1e-13)))))
;;QR
(5am:test qr-test
  (let ((n 20))
    (mapcar #'(λ (arg)
		 (letv* (((func eps) arg)
			 (a (funcall func (list n n)))
			 (q r (qr a nil))
			 (qp rp p (qr a t)))
		   (is (<= (norm #i(a - q * r)) eps))
		   (is (<= (norm #i(a * p - qp * rp)) eps))))
	    (zip (list #'srandn #'randn #'crandn #'zrandn)
		 (list 1e-4 1e-13 1e-4 1e-13)))))
;;Schur
(5am:test schur-test
  (let ((n 20))
    (mapcar #'(λ (arg)
		 (letv* (((func eps) arg)
			 (a (funcall func (list n n)))
			 (s u q (schur a :v)))
		   (is (<= (norm #i(a - q * u * q')) eps))))
	    (zip (list #'srandn #'randn #'crandn #'zrandn)
		 (list 1e-4 1e-13 1e-4 1e-13)))))

;;SVD
(5am:test svd-test
  (let ((n 20))
    (mapcar #'(λ (arg)
		 (letv* (((func eps) arg))
		   (letv* ((a (funcall func (list (* 2 n) n)))
			   (σ u v (svd a :uv)))
		     (is (<= (norm #i(a - u[:, : dimensions(σ, 0)] * diag(σ) * v[:, :dimensions(σ, 0)].')) eps)))
		   (letv* ((a (funcall func (list n (* 2 n))))
			   (σ u v (svd a :uv)))
		     (is (<= (norm #i(a - u[:, : dimensions(σ, 0)] * diag(σ) * v[:, :dimensions(σ, 0)].')) eps)))
		   (letv* ((a (funcall func (list n n)))
			   (σ u v (svd a :uv)))
		     (is (<= (norm #i(a - u[:, : dimensions(σ, 0)] * diag(σ) * v[:, :dimensions(σ, 0)].')) eps)))))
	    (zip (list #'srandn #'randn #'crandn #'zrandn)
		 (list 1e-4 1e-13 1e-4 1e-13)))))
;;SYL
(5am:test syl-test
  (let ((n 20) (m 10))
    (mapcar #'(λ (arg)
		 (letv* (((func eps) arg)
			 (a (funcall func (list n n)))
			 (b (funcall func (list m m)))
			 (x (funcall func (list n m))))
		   (is (<= (norm #i(x - syl(a, b, a * x + x * b))) (* 100 eps)))
		   (is (<= (norm #i(x - syl(a, b, a * x - x * b, \ :nnn ))) (* 100 eps)))))
	    (zip (list #'srandn #'randn #'crandn #'zrandn)
		 (list 1e-4 1e-13 1e-4 1e-13)))))
